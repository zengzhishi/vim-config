"   a. <silent>   :Do not echo back
"   b. au  :autocmd
"   c. <leader> :Convert t to \
"       e.g. 
"       nmap <silent> <leader>t :!ctags -R .<CR>
"   d. <CR> means Enter
"   d. <C-X>  means Ctrl+X
"

source $VIMRUNTIME/vimrc_example.vim
source ~/.vim/plugin/autocomplpop.bak


if filereadable( $HOME . '/.vimpath' )
    source $HOME/.vimpath
endif

if version >= 603
    set helplang=en
endif


set autoindent
set encoding=gbk
set expandtab
set fileencodings=gbk
"set fileencodings=utf-8-bom,ucs-bom,cp936,utf-8,gbk,gb18030,ucs,big5,euc-jp,euc-kr,latin1
set foldcolumn=0
set foldmethod=marker
set hlsearch
set ignorecase smartcase
set incsearch
set nobackup
set nocompatible
set nowrap
set nocursorcolumn
set nu
set shiftwidth=4
set showmatch
set tabstop=4
set termencoding=utf-8
"set termencoding=gbk
"let &termencoding=&encoding
set updatetime=1
set virtualedit=block
set whichwrap=b,s,h,l,<,>,~,[,]
set wildmenu
set fo+=t

set mouse=

if !has( 'gui' )
    set shell=bash
endif

filetype on
filetype plugin on
syntax on



" Key mappings {{{

" Tab Previous
"nmap <F2> :tabp<CR>

" Tab Next
"nmap <F3> :tabnext<CR>
nmap  <C-t> :tn<CR>

"nmap <F4> :tabnew<CR>
"imap <F4> <ESC>:Dox<CR>

" Cleans the search hightlights
nmap <silent> <F4> :set invhlsearch<CR>

" Updates taglist of the current project
"nmap <silent> <F5> :TlistUpdate<CR>

" Opens buffer manager
nmap <silent> <F6> :SBufExplorer<CR>

" Opens the window manager
nmap <silent> <F7> :WMToggle<CR>

" Toggles compilation error window
nmap <silent> <F9> :copen<CR>

" tenc mode
nmap <F10> :set tenc=utf8<CR>

nmap <C-k> :set nonu<CR>
nmap <C-l> :set nu<CR>

set nopaste
set pastetoggle=<F12>

" Generates ctags database
"nmap <silent> <C-C> :!find . -name "*.h" -o -name "*.cpp" -o -name "*.c" -o -name "*.py" -o -name "*.sh" -o -name "*.t" > cscope.files; cscope -bkq -i cscope.files; ctags -R .<CR>

" Moves to the first explorer window
nmap <silent> <C-W><C-F> :FirstExplorerWindow<CR>

" Moves to the bottom explorer window
nmap <silent> <C-W><C-B> :BottomExplorerWindow<CR>

" Ctrl-F to yank line upstairs 
"inoremap <silent> <C-F> <C-O>:exe "norm! kly0jPD"<CR> 
"nmap <C-I> @q
"nmap <C-E> :cn<CR>

inoremap <expr> <CR>       pumvisible()?"\<C-Y>":"\<CR>"
inoremap <expr> <C-J>      pumvisible()?"\<PageDown>\<C-N>\<C-P>":"\<C-X><C-O>"
inoremap <expr> <C-K>      pumvisible()?"\<PageDown>\<C-N>\<C-P>":"\<C-K>"
"inoremap <expr> <C-H>      pumvisible()?"\<PageDown>\<C-N>\<C-P>":"\<C-H>"
inoremap <expr> <C-L>      pumvisible()?"\<PageUp>\<C-P>\<C-N>":"\<C-L>"
inoremap <expr> <C-U>      pumvisible()?"\<C-E>":"\<C-U>"

" For cscope"
 nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
 nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
 nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
 nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
 nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
 nmap <C-\>f :cs find g <C-R>=expand("<cword>")<CR><CR>
 nmap <C-\>i :cs find i ^<C-R>=expand("<cword>")<CR><CR>
 nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
" End mappings}}}


iab #b /*************************************************
iab #e <Space>**************************************************/

" Sets plugin variables {{{
let g:Tlist_Compact_Format       = 1
let g:Tlist_File_Fold_Auto_Close = 0
let g:Tlist_Use_SingleClick      = 0
let g:Tlist_WinWidth             = 35
let g:Tlist_Use_Right_Window     = 1 

let g:bufExplorerOpenMode        = 1
let g:bufExplorerShowDirectories = 1
let g:bufExplorerSortBy          = 'mru'
let g:bufExplorerSplitBelow      = 1
let g:bufExplorerSplitHorzSize   = 15
let g:persistentBehaviour        = 0
let g:winManagerWidth            = 35
let g:winManagerWindowLayout = 'TagList|FileExplorer'
let g:bufExplorerMaxHeight=35

let g:miniBufExplorerMoreThanOne=0
let g:miniBufExplMapWindowNavVim = 1 
let g:miniBufExplMapWindowNavArrows = 1 
let g:miniBufExplMapCTabSwitchBufs = 1 
let g:miniBufExplModSelTarget = 1 

"let g:doxygenToolkit_authorName="Guannan Ma"
let g:doxygenToolkit_briefTag_funcName="yes"
"}}}
"

"Sets Diff Mode {{{
set diffexpr=MyDiff()
function MyDiff()
    let opt = '-a --binary '
    if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
    if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
    let arg1 = v:fname_in
    if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
    let arg2 = v:fname_new
    if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
    let arg3 = v:fname_out
    if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
    if &sh =~ '\<cmd'
        silent execute '!"diff" ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . '"'
    else
        silent execute '!diff ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
    endif
endfunction
"}}}


" Set VIM UI {{{
"
" line space
set lsp=0
set wildmenu
" row,column
set ruler
set cmdheight=2
set lz
set hid
set backspace=2
set whichwrap+=<,>,h,l
set shortmess=atI
set report=0
set noerrorbells
set fillchars=vert:\ ,stl:\ ,stlnc:\
set showmatch
if version >= 700
    set cursorline
endif

set fdm=syntax
"colorscheme darkburn 
"color wombat256mod
color wombat256
"color molokai
set viminfo='1000,<500
"set background=dark
hi Visual     ctermfg=darkblue ctermbg=white
hi PmenuSel   ctermfg=white    ctermbg=darkblue
hi Pmenu      ctermfg=darkblue ctermbg=white
hi PmenuSbar  ctermbg=5
hi PmenuThumb ctermfg=yellow
"hi CursorLine ctermbg=blue
"hi CursorColumn ctermbg=blue
"hi TabLine cterm=none ctermfg=0 ctermbg=7
"highlight StatusLine term=bold,reverse cterm=NONE ctermfg=White ctermbg=Blue
"}}}

" Set Status Bar{{{
set nocp
set showmode
set laststatus=2
set statusline=
set statusline+=%2*%-3.3n%0*\ " buffer number
set statusline+=%f\ " file name
set statusline+=%h%1*%m%r%w%0* " flag
set statusline+=[
if v:version >= 600
set statusline+=%{strlen(&ft)?&ft:'none'}, " filetype
set statusline+=%{&encoding}, " encoding
endif
set statusline+=%{&fileformat}] " file format
if filereadable(expand("$VIM/vimfiles/plugin/vimbuddy.vim"))
set statusline+=\ %{VimBuddy()} " vim buddy
endif
set statusline+=%= " right align
set statusline+=%2*0x%-8B\ " current char
set statusline+=%-14.(%l,%c%V%)\ %<%P " offset
" special statusbar for special window
if has("autocmd")
au FileType qf
\ if &buftype == "quickfix" |
\ setlocal statusline=%2*%-3.3n%0* |
\ setlocal statusline+=\ \[Compiler\ Messages\] |
\ setlocal statusline+=%=%2*\ %<%P |
\ endif
fun! FixMiniBufExplorerTitle()
if "-MiniBufExplorer-" == bufname("%")
setlocal statusline=%2*%-3.3n%0*
setlocal statusline+=\[Buffers\]
setlocal statusline+=%=%2*\ %<%P
endif
endfun
if v:version>=600
au BufWinEnter *
\ let oldwinnr=winnr() |
\ windo call FixMiniBufExplorerTitle() |
\ exec oldwinnr . " wincmd w"
endif
endif
" Nice window title
if has('title') && (has('gui_running') || &title)
set titlestring=
set titlestring+=%f\ " file name
set titlestring+=%h%m%r%w " flag
endif
"}}}


" Set tag/cscope {{{" 
"set tags=tags,~/.vim/mylibtags,~/.vim/systags,../tags,../../tags
"set completeopt=menu,longest
"set completeopt=menu
" cscope add ./cscope.out
" End ctags/cscope}}}

func SetPyTitl()                                                                                       
    call append(0,"# !/bin/env python")                                                                 
    call append(1, "# -*- coding: utf-8 -*_")                                                    
    call append(2, "\"\"\"")
    call append(3, "    @FileName: ".expand("%:t"))                                            
    call append(4, "    @Author: zengzhishi(zengzs1995@gmail.com)")                                               
    call append(5, "    @CreatTime: ".strftime("%Y-%m-%d %H:%M:%S"))            
    "call append(6, "    @LastModif: ".strftime("%Y-%m-%d %H:%M:%S")) 
    call append(6, "    @Note:")                                                              
    call append(7, "\"\"\"")
    call append(9, "")                                                                        
    call append(10, "")                                                                        
    exe 'normal'.line('$').'G'
    call append(line(".") + 0, "")                                                                       
    call append(line(".") + 1, "# vi:set tw=0 ts=4 sw=4 nowrap fdm=indent")                               
endfunc                                                                                                 

func SetShellTitl()                                                                                       
    call append(0,"#!/bin/bash")                                                                 
    "call append(2, "\"\"\"") 
    "call append(4, "    @FileName: ".expand("%:t"))                                            
    "call append(5, "    @Author: ()")                                               
    "call append(6, "    @CreatTime: ".strftime("%Y-%m-%d %H:%M:%S"))            
    "call append(7, "    @LastModif: ".strftime("%Y-%m-%d %H:%M:%S")) 
    "call append(8, "    @Note:")                                                              
    "call append(9, "\"\"\"")
    call append(10, "")                                                                        
    exe 'normal'.line('$').'G'
    call append(line(".") + 0, "")                                                                       
    call append(line(".") + 1, "# vi:set tw=0 ts=4 sw=4 nowrap fdm=indent")                               
endfunc                                                                                                 

function UpdateTitle()
    call DeleteTrailingWS() 
    let line = getline(8)
    if line =~ '^.*@LastModif.*$'
        call setline(5,"    @FileName: ".expand("%:t")) 
        call setline(8,"    @LastModif: ".strftime("%Y-%m-%d %H:%M:%S"))
    endif
endf

function TitleDet()
        let n=1
        while n < 10
                let line = getline(n)
                if line =~ '^.*@LastModif.*$'
                        call UpdateTitle()
                        return
                endif
                let n = n + 1
        endwhile
        call SetPyTitl()
endfunction

func! DeleteTrailingWS()                                                                                                       
    exe "normal mz"                                                                                 
    %s/\s\+$//ge                                                                                    
    exe "normal `z"                                                                                 
    "silent! %s/#\([^ !]\+\)/# \1/g                                                                  
endfunc 

nmap <C-x> :call TitleDet()<CR>
"nmap <silent> <F2> :call TitleDet()<CR>
"nmap <C-m> :source ~/.vim/plugin/autocomplpop.bak 

" Set filetype {{{"
"au BufNewFile *.h    0r ~/.vim/template/template.h|norm 3G
"au BufNewFile *.cpp  0r ~/.vim/template/template.cpp|norm 1G
"au BufNewFile *.cpp  let g:DoxygenToolkit_Guannan MaFlag="cpp"
au BufNewFile *.pl   0r ~/.vim/template/template.pl|norm 2G 
"au BufNewFile *.py   0r ~/.vim/template/template.py|norm 2G
autocmd BufNewFile *.py exec ":call SetPyTitl()"|norm 10G
autocmd BufNewFile *.sh exec ":call SetShellTitl()"|norm 12G
au BufWritePost *.py :call UpdateTitle()

nmap <silent> pyau:set dictionary=~/.vim/pythonwords<CR>
au! BufRead,BufNewFile *.json setfiletype json
au! BufRead,BufNewFile *.xml set encoding=utf-8|set fenc=utf8|set fdm=indent
au! BufRead,BufNewFIle *.php set nu|set encoding=utf-8|set fileencoding=utf-8
au BufRead,BufNewFile *.py set makeprg=pylint\ %
"au VimLeave * exe ' if strlen(v:this_session) | exe "wviminfo! " . v:this_session . ".viminfo" | else | exe "wviminfo! " . "~/.vim/session/" . g:myfilename . ".session.viminfo" | endif '
"au VimLeave * exe 'if strlen(v:this_session) | exe "mksession! " . v:this_session | else | exe "mksession! " . "~/.vim/session/" . g:myfilename . ".session" | endif '
au VimLeave * exe 'if exists("g:cmd") && g:cmd == "vim" | if strlen(v:this_session) | exe "wviminfo! " . v:this_session . ".viminfo" | else | exe "wviminfo! " . "~/.vim/session/" . g:myfilename . ".session.viminfo" | endif | endif '
au VimLeave * exe 'if exists("g:cmd") && g:cmd == "vim" | if strlen(v:this_session) | exe "mksession! " . v:this_session | else | exe "mksession! " . "~/.vim/session/" . g:myfilename . ".session" | endif | endif'
" }}}

"let OmniCpp_NamespaceSearch = 2
let OmniCpp_DefaultNamespaces = ["std", "omni"]
"let OmniCpp_MayCompleteScope = 1
let OmniCpp_SelectFirstItem  = 2


set complete=.,b,u,t,k

"let g:AutoComplPop_NotEnableAtStartup = 1 
let g:AutoComplPop_BehaviorKeywordLength = 3

"set syntastic rules {{{
"c
" let g:syntastic_c_auto_refresh_includes = 0
"let g:syntastic_c_include_dirs = [ 'output/sagitc/include/', 'output/sagitp/include', 'output/include']
"c++
"let g:syntastic_cpp_remove_include_errors = 0

"for c syntastic

execute pathogen#infect()


